******************* patterns to solve the questions of sliding windows *****************************
# u have a given a problem and in that problem u take a particular that is called as sliding windows

####### 
 ....  in sliding window question we can't apply kadane's algorithm because in kadane's algorthim size is not fixed 

# 4 key patterns are their in it 
1) fixed size window 
2) sometimes u donot know the size of the particular window
3) two pointer approach 
4) u need a external data structure (this is called optimized sliding windows)

Q. what happens in fixed size window pattern 
A.   let's take a pattern
             A[] ={ 1,3,-1,-3,5,3,6,7 } k =3; (means u need three size window)
                    '''''' =3
                      ''''''' =3       { so everytime u will put this logic in this these
                          ''''''=5        kind of question }
                              '''''=5

for fixed size window - minimum size subarray 
knows the size of the window - two sum using while loop is (two pointer approach)
minimum window substring - u need a external data structure (this is called optimized sliding windows)
Minimum Size Subarray Sum -  sometimes u donot know the size of the particular window

  int i=0, j=0;
         int sum =0;
         int len = Integer.MAX_VALUE;
         while(j<nums.length) 
           {  //we will include the current sum 
              sum =sum + nums[j];

              // mere pass ek window ka sum ready h
               while(sum>=target){
                 // minimise ->sum me se decrease karo , len bhi update
               //    krelna ,i/start ko aage badhana padega

                 len = Math.min(len,j-i+1);
                 sum = sum - nums[i];
                 i++;
               }
                 j++;
           }

           if(len == Integer.MAX_VALUE)
              return 0;
     
       return len;


**********************************************************************************************************************************
problem -> arr:2,3,5,2,9,7,1
             # =3  // this the given size of subarray

okay! now we will see how brute force can be optimised to 
  1) repeative work (if u are doing repeative work then it means it can be furthur optimised)



basic approach of sliding window question 
   1) u must be given an array or string 

           arr , string + asked to find   + largest max/min
                            subarray or substring


#****************** Max sum sub-array of size K ********************





